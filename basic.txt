*** Capitol 1:

Variables:

- are containers can store values in.
  - var myVariable; /* undefined */
  - var myVariable = 'text' /* assign a value to a variable */

Data types:

- Primitives:
  - Boolean
  - Null
  - Undefined
  - Number
  - String
  - Symbol

- Object

  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  o All types except objects define imutable values(values that are incapable of
    being changed. These are "primitive values".

  > Boolean type:
    - a logical entity and can have two values:
      - true
      - false

  > Null type:
    - has exactly one value: null

    o The value null represents the intentional absence of any object value.
      null is not an identifier for a property of the global object.
      null expresses a lack of identification, indicating that a variable points to no object.
      In APIs, null is often retrieved in a place where an object can be expected but no object is relevant.

      * Examples:

        ```

          // foo does not exist. It is not defined and has never been initialized:

             foo;
             "ReferenceError: foo is not defined"

          // foo is known to exist now but it has no type or value:

             var foo = null;
             foo;
             "null"

        ```

  > Undefined type:
    undefined is a property of the global object
    null is not equivalent to undefined

    o A variable that has not been assigned a value has the value undefined
    o A method or statement also returns undefined if the variable
      that is being evaluated does not have an assigned value.
    o A function returns undefined if a value was not returned.

    - no writable
    - no enumerable
    - no configurable

      * Examples:

        - Strict equality and undefined:

          ```
            var x;
            if (x === undefined) {
              // these statement execute
            }
            else {
              // these statement do not execute
            }

            x == undefined also checks whether x is null, while strict equality doesn't.

          ```

        - Typeof operator and undefined:
           > this kind of technique should be avoided.

          ```
            var x;
            if (typeof x === undefined) {
              // these statement execute
            }

          ```

        - Void operator and undefined:
           > The void operator evaluates the given expression and then returns undefined

          ```

            var x;
            if (x === void 0) {
              // these statements execute
            }

            // y has not been declared before
            if (y === void 0) {
              // throws a - Uncaught ReferenceError: y is not defined
            }

          ```

  > Number type:
    - one number type: the double-precision 64-bit binary format IEEE 754 value (numbers between -(253 -1) and 253 -1).
    - There is no specific type for integers.
    - Values of the number type are numeric values.

  > String type:
    - is used to represent textual data.
    - Each element in the String occupies a position in the String.
    - The first element is at index 0, next at index 1 and so on.
    - The length of a string is the number of the elements in it.

  > Symbol type:
    - A symbol is a unique and imutable primitive value
      and may be used as the key of an Object property.

  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  > Objects:
    - a limited set of properties are initialized
    - then properties can be added and removed.
    - Property values can be values of any type,
      including other objects, which enables building complex data structures.
    - Properties are identified using key values.
      * A key value is either a String or a Symbol value.

    - Normal objects:
        - A JavaScript object is a mapping between keys and values.
        - Keys are strings (or Symbols) and values can be anything.
        - collection of properties.

    - Functions:
        - are regular objects with capability of being callable.

    - Dates:

    - Arrays:
        - indexed collections
        - are regular objects
        - particular relation between key and length.

    - Typed arrays:
    - Keyed collections: Maps, Sets, WeakMaps, WeakSets:

*** Capitol 2

o Basic:
  - Is case-sensitive.
  - Use Unicode character set.
  - instructions are called statements and are separated by semicolons (;).

o Declarations:
    // There are three kinds of declarations.

    - var => declares a variable, optionally initializing it to a value.

    - let => declares a block scoped, local variable, optionally initializing to a value.

    - const => declares a block scoped, read-only named constant.

o Variables:
  - Variables declarations:
    > Three ways to declare a variable

      ```

        with the keyword var:
        var x = 42;  // local and global variables

        directly assigning it a value
        x = 42;  // outside of a function it declares a global variable
                 // generate warning

        with the keyword let:
        let x = 42;  // a bloc scope variable

      ```

  - EVALUATING VARIABLES:

    ! A variable declared with var or let statement
      with no assigned value specified
      has the value undefined.

    - Examples:


        var x; => //undefined

        /* use undefined to determine whether a variable has a value.*/
        : var input;

          if (input === undefined) {
            doThis();
          } else {
            doThat();
          }

        > undefined value behaves like false when is used in a boolean
          context.

        : var myArray = [];

          if (!myArray[0]) {
            myFunction();
          }

        > undefined value convert to NaN in a numeric context

        : var a;
          a + 2;  *** evaluate to NaN

        > when evaluate a null variable, the null behaves like 0 in a numeric
          context and as false in a boolean context.

        : var a = null;
          console.log(a * 32); *** will log 0 in console

  - Variables scope:

    - When declare a variable outside of any funnction
      it is called a global variable and it is available
      to any other code in the document.

    - When declare a variable within a function
      it is called local variable and it is available only
      within that function.

      : if (true) {
          var x = 5;
        }
        console.log(x);  // x is 5 // *** global

      : if (true) {
          let y = 5;
        }
        console.log(y);  // ReferenceError: y is not defined // *** local

  - Variable hoisting:

      can refer to a variable declared later, without getting an exception.
      This concept is known as hoisting;
      variables in JavaScript are in a sense "hoisted"
      or lifted to the top of the function or statement.
      However, variables that are hoisted return a value of undefined.

      : console.log(x === undefined); // true
        var x = 3;

      Because of hoisting, all var statements in a function
      should be placed as near to the top of the function as possible.
      This best practice increases the clarity of the code.

  - Function hoisting:


      For functions, only the function declaration
      gets hoisted to the top and not the function expression.


        /* Function declaration */

        foo(); // "bar"

        function foo() {
          console.log('bar');
        }


        /* Function expression */

        baz(); // TypeError: baz is not a function

        var baz = function() {
          console.log('bar2');
        };

  - Global variables:

      Global variables are in fact properties of the global object.
      In web pages, the global object is window, so you can set
      and access global variables using the window.variable syntax.

  - Constants:

      Create a read-only, named constant with the const key.
      A constant cannot change value through assignment or
      be re-declared while the script is running.
      It must be initialized to a value.
      The scope rules for constants are the same as those for let block-scope variables.

  - Data type conversion:

      JavaScript is a /dynamically typed language.
      That means you don't have to specify the data type of a variable
      when you declare it, and data types are converted automatically
      as needed during script execution.

      - Example:

        : var answer = 42;
          answer = 'Thanks for your help';

      In expressions involving numeric and string values
      with the + operator, JavaScript converts numeric values to strings.
      For example, consider the following statements:

        : x = 'The answer is ' + 42 // "The answer is 42"
          y = 42 + ' is the answer' // "42 is the answer"

*** Capitol 3:

  - STATEMENTS:

    - Block statement:

      The most basic statement is a block statement that is used to group
      statements. The block is delimited by a pair of curly brackets.

        {
          statement_1;
          statement_2;
          .
          .
          .
          statement_n;
        }

      ! block statements do not define a scope.

      : var x = 1;
        {
          var x = 2;
        }
        console.log(x); // outputs 2

    - Conditional statements:
        * A conditional statement is a set of commands that executes if a specified condition is true.
        JavaScript supports two conditional statements: if...else and switch.
